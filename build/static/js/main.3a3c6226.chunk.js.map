{"version":3,"sources":["recipies.js","heading.js","App.js","serviceWorker.js","index.js","recipies.module.css"],"names":["Recipie","title","image","calories","ingredients","i","className","style","recepie","src","alt","map","ingredient","key","text","Heading","App","useState","recipies","setrecipies","search","setSearch","query","setQuery","useEffect","getrecipies","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","recipie","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"4PA0BeA,EAvBC,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,MAAMC,EAAwB,EAAxBA,SAASC,EAAe,EAAfA,YAChCC,EAAE,EACN,OACI,yBAAKC,UAAWC,IAAMC,SAClB,4BACKP,GAEL,2BACKE,GAEL,yBAAKM,IAAKP,EAAOQ,IAAI,YAErB,4BACKN,EAAYO,KAAI,SAAAC,GAAU,OACvB,wBAAIC,IAAKR,KACJO,EAAWE,YCLrBC,G,MAVC,WACZ,OACI,yBAAKT,UAAU,WACX,0DCuDGU,EArDH,WACR,IADY,EAImBC,mBAAS,IAJ5B,mBAILC,EAJK,KAIIC,EAJJ,OAKaF,mBAAS,IALtB,mBAKPG,EALO,KAKAC,EALA,OAMWJ,mBAAS,YANpB,mBAMPK,EANO,KAMDC,EANC,KASZC,qBAAU,WACPC,MAGD,CAACH,IAEH,IAAMG,EAAW,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCL,EAApC,mBAff,WAee,oBAdd,qCAaI,cACZM,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGhBX,EAAYW,EAAKC,MACjBC,QAAQC,IAAIH,GAJI,2CAAH,qDAkBb,OAEI,yBAAKxB,UAAU,OACX,kBAAC,EAAD,MACA,0BAAMA,UAAU,cAAc4B,SATtB,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,KAQG,2BAAOd,UAAU,aAAa+B,KAAK,OAAOC,MAAOlB,EAAQmB,SAfpD,SAAAJ,GACbd,EAAUc,EAAEK,OAAOF,QAcsEG,YAAY,uDAC7F,2BAAOJ,KAAK,SAASC,MAAM,YAE/B,yBAAKhC,UAAU,YAGNY,EAASP,KAAI,SAAA+B,GAAO,OACjB,kBAAC,EAAD,CAAS7B,IAAO6B,EAAQC,OAAOC,MAAO3C,MAAOyC,EAAQC,OAAOC,MAAO1C,MAAOwC,EAAQC,OAAOzC,MAAOC,SAAUuC,EAAQC,OAAOxC,SACzHC,YAAcsC,EAAQC,OAAOvC,oBC1CrCyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBElInBC,EAAOC,QAAU,CAAC,QAAU,4B","file":"static/js/main.3a3c6226.chunk.js","sourcesContent":["import React from 'react';\nimport style from './recipies.module.css';\n\nconst Recipie = ({title, image,calories,ingredients})=>{\n    let i=0;\n    return(\n        <div className={style.recepie}>\n            <h1>\n                {title}\n            </h1>\n            <p>\n                {calories}\n            </p>\n            <img src={image} alt=\"Chicken\" />\n\n            <ol>\n                {ingredients.map(ingredient =>(\n                    <li key={i++}>\n                        {ingredient.text}\n                    </li>\n                ))}\n            </ol>\n        </div>\n    )\n}\n\nexport default Recipie;","import React from 'react'\n\n\nconst Heading = () =>{\n    return(\n        <div className=\"heading\">\n            <h1>\n                The Ultimate Recipe app\n            </h1>\n        </div>\n    )\n}\n\nexport default Heading;","/* eslint-disable no-unused-vars */\nimport React , {useEffect , useState} from 'react';\nimport { async } from 'q';\nimport Recipie from './recipies';\nimport './App.css';\nimport Heading from './heading';\n\n\nconst App = ()=>{\n    const APP_ID = '9661038f';\n    const APP_KEY = '2bd1d01f7c5dd31397b3e7df75abbae2';\n\n    const [recipies,setrecipies] = useState([]);\n    let [search,setSearch] = useState(\"\");\n    let [query,setQuery] = useState('Choclate');\n    \n    \n    useEffect(()=>{\n       getrecipies();\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[query]);\n\n    const getrecipies = async ()=>{\n        let response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n        let data = await response.json();\n        setrecipies(data.hits)\n        console.log(data);\n\n    }\n\n    const updateSearch = e =>{\n            setSearch(e.target.value);\n            // console.log(search);\n    }\n\n    const updatequery = e =>{\n        e.preventDefault();\n        setQuery(search)\n    }\n\n        return (\n\n            <div className=\"App\">\n                <Heading />\n                <form className=\"search-form\" onSubmit={updatequery}>\n                    <input className=\"serach-bar\" type=\"text\" value={search} onChange={updateSearch} placeholder=\"Search here  e.g:- paneer , chicken , puddings etc\" />\n                    <input type=\"submit\" value=\"Search\" />\n                </form>\n                <div className=\"recipies\">\n\n               \n                        {recipies.map(recipie=>(\n                            <Recipie key = {recipie.recipe.label} title={recipie.recipe.label} image={recipie.recipe.image} calories={recipie.recipe.calories}\n                            ingredients ={recipie.recipe.ingredients} />\n                        ))}\n                 </div>\n            </div>\n        )\n    \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recepie\":\"recipies_recepie__2eVyP\"};"],"sourceRoot":""}